#+theme=briebug
#+hideLastSlide=true

News features in PHP 7
24 Nov 2016
Tags: PHP7

Jaric Kuo
Debug Guy
jarick@cnyes.com
@jaric

* Speed

- Bench marks for PHP 7 consistently show speeds twice as fast as PHP 5.6.
.image images/benchmark-853x480.png



* PHP 5 - Declarations

- Since PHP 5, you can use type hinting to specify the expected data type of an argument in a function declaration, but only in the *declaration*.

.code sampleCode/php5-declaration.php 

* PHP 5 - Declarations #2

.code sampleCode/php5-declaration-error.php 

* PHP 7 - Scalar Type Hints

- With PHP 7 we now have added Scalar types.  
- Specifically: 
  - int
  - float
  - string
  - bool

* PHP 7 - Scalar Type Hints #2
  
.code sampleCode/php7-declaration.php

* PHP 7 - Return Type Declarations

- PHP 7 supports Return Type Declarations which support all the same types as arguments.
  - Non-strict int
  - strict int

* Non-strict int
- Everything will work the same as it did without a return type.
- The only difference is that it will *force* the return to be an *int*.

.code sampleCode/php7-non-strict-return-declaration.php

* Strict int
.code sampleCode/php7-strict-return-declaration.php

* Say hi to new throwable interface

.code sampleCode/throwable-interface.php

* Error Handling

- *Error* and *Exception* both implement the new *Throwable* class.
- We can use Throwable in try/catch blocks to catch both Exception and Error objects.
  - ArithmeticError
  - AssertionError
  - DivisionByZeroError
  - ParseError
  - TypeError

* Type Error

.code sampleCode/type-error.php

* Parse Error

.code sampleCode/parse-error.php

* New Operators 


.image images/spaceship.png

* Spaceship Operator

- The most common usage for this operator is in *sorting*.
  - Return 0 if values on either side are equal
  - Return 1 if value on the left is greater
  - Return -1 if the value on the right is greater


* Spaceship Operator - sample 
.code sampleCode/Spaceship-operator.php

* Null Coalesce Operator
*** The fabled if-set-or. 
*** It will return the left operand if it is not NULL, otherwise it will return the right.
*** It will not raise a notice if the left operand is a non-existent variable.

  $name = $firstName ??  "Guest";

* Null Coalesce Operator - sample
.code sampleCode/null-coalesce-operator.php

* Conclusion

- Thank you *Chris*
- Please start to use *declaration* in your function. We are going to enable strict mode in the future.
- Catch-all blocks should catch *Throwable* instead of Exception.
- Use new operators to keep our code clean.

* Reference

- [[http://php.net/manual/en/migration70.php][Migrating from PHP 5.6.x to PHP 7.0.x ]]
- [[http://stackoverflow.com/questions/6384431/creating-anonymous-objects-in-php?rq=1][Creating anonymous objects in php]]
- [[http://blog.teamtreehouse.com/5-new-features-php-7][5 New Features in PHP 7]]
- [[https://www.phpclasses.org/blog/post/318-PHP-7-Anonymous-Classes-Tutorial.html][PHP 7 Anonymous Classes Tutorial]]
.image images/dragon.png
